// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model UserDetails {
  id        Int     @id @default(autoincrement())
  firstName String?
  lastName  String?
  city      String?
  district  String?
  country   String?
  gender    String?
  address   String?
  phone     String?
  dni       Int?    @unique
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String
  role        Role          @relation(fields: [roleId], references: [id])
  roleId      Int
  userDetails UserDetails[]
  parents     Parent[]
  teachers    Teacher[]
  students    Student[]
}

model Parent {
  id               Int             @id @default(autoincrement())
  workPlaceAddress String?
  workPlaceNumber  String?
  user             User            @relation(fields: [userId], references: [id])
  userId           Int
  parentStudents   ParentStudent[]
}

model ParentStudent {
  id        Int     @id @default(autoincrement())
  parent    Parent  @relation(fields: [parentId], references: [id])
  parentId  Int
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
}

model Student {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  birthdate      DateTime?
  degree         Degree           @relation(fields: [degreeId], references: [id])
  degreeId       Int
  parentStudents ParentStudent[]
  enrollments    Enrollment[]
  sections       SectionStudent[]
}

model Teacher {
  id               Int             @id @default(autoincrement())
  academicDegree   String
  yearOfExperience Int
  hire_date        DateTime
  user             User            @relation(fields: [userId], references: [id])
  userId           Int
  teacherCourses   TeacherCourse[]
}

model Section {
  id       Int              @id @default(autoincrement())
  name     String
  courseId Int
  course   Course           @relation(fields: [courseId], references: [id])
  Studen   SectionStudent[]
}

model SectionStudent {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  section   Section @relation(fields: [sectionId], references: [id])
  sectionId Int

  @@unique([studentId, sectionId])
}

model Degree {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]
}

model TeacherCourse {
  id        Int     @id @default(autoincrement())
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
}

model Course {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  teacherCourses TeacherCourse[]
  enrollments    Enrollment[]
  Section        Section[]
}



model Enrollment {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  records   Record[]
}

model Record {
  id           Int        @id @default(autoincrement())
  bimestre     Int
  record1      Decimal
  record2      Decimal
  promedio     Decimal
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId Int
}
